// src/app/components/CourseSubjectTable.tsx
"use client";
import React, { useEffect, useState, CSSProperties } from 'react';
import { Flex, Table, Button, Space, Modal, message, Input, Select } from 'antd';
import type { TableColumnsType } from 'antd';
import { createStyles } from 'antd-style';
import { useRouter } from 'next/navigation';


const useStyle = createStyles(({ css, token }) => {
  const { antCls } = token;
  
  return {
    customTable: css`
      ${antCls}-table {
        ${antCls}-table-container {
          ${antCls}-table-body,
          ${antCls}-table-content {
            scrollbar-width: thin;
            scrollbar-color: #eaeaea transparent;
            scrollbar-gutter: stable;
          }
        }
      }
    `,
  };
});

interface CourseSubjectTableProps {
  subjectCourseId: string;
}

interface FixedDataType {
  key: React.Key;
  name: string;
  description: string;
}

interface CourseDataType {
  key: React.Key;
  nameFullDegreeTh:string;
  planCourse: string;
  subjectCode: string;
  nameSubjectThai: string;
  nameSubjectEng: string;
  subjectCategoryName: string;
  subjectGroupName: string;
  studyYear: number;
  term: number;
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ App ‡πÄ‡∏õ‡πá‡∏ô CourseSubjectTable ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö Prop ‡πÉ‡∏´‡∏°‡πà
const CourseSubjectTable: React.FC<CourseSubjectTableProps> = ({ subjectCourseId }) => {
  // ... (useStyle, States, ‡πÅ‡∏•‡∏∞ Router ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  // ...
  const { styles } = useStyle();
  const [dataSource, setDataSource] = useState<CourseDataType[]>([]);
  const [loading, setLoading] = useState(true);
  const [courseNameFilter, setCourseNameFilter] = useState<string>('all');
  const [allData, setAllData] = useState<CourseDataType[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const router = useRouter();

  // const handleViewDetails = (id: number) => {
  //   // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ details/‡∏ï‡∏≤‡∏° id ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  //   router.push(`/courses/details/${id}`);
  // };

  const handleDelete = (id: number) => {
    Modal.confirm({
      title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?',
      okText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
      cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      onOk: async () => {
        try {
          // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const response = await fetch(`/api/subjectCourse`, {
            method: 'DELETE',
            headers: {
            'Content-Type': 'application/json',
          },
          // 3. ‡∏™‡πà‡∏á ID ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô body ‡∏Ç‡∏≠‡∏á request
          body: JSON.stringify({ id: id }),
          });

          if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
          }

          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô State ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          setAllData(prevData => prevData.filter(item => item.key !== id));
          message.success('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        } catch (error) {
          console.error(error);
          message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }
      },
    });
  };

  const filterData = (data: CourseDataType[], term: string, nameFilter: string) => {
    const lowerCaseTerm = term.toLowerCase().trim();

    let filteredByName = data;
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡πÑ‡∏ó‡∏¢)' ‡∏Å‡πà‡∏≠‡∏ô
    if (nameFilter !== 'all') {
      filteredByName = data.filter(item => item.nameFullDegreeTh === nameFilter);
    }
    
    if (!lowerCaseTerm) {
      return filteredByName; 
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å Field (‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°)
    return filteredByName.filter(item => {
      const searchFields = [
        item.nameFullDegreeTh,
        item.planCourse,
        item.subjectCode,
        item.nameSubjectThai,
        item.nameSubjectEng,
        item.subjectCategoryName,
        item.subjectGroupName,
        item.studyYear.toString(), 
        item.term.toString(),       
      ].join('|').toLowerCase();

      return searchFields.includes(lowerCaseTerm);
    });
  };


  const fixedColumns: TableColumnsType<CourseDataType> = [
    { title: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡πÑ‡∏ó‡∏¢)', dataIndex: 'nameFullDegreeTh', width: 50 },
    { title: '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', dataIndex: 'planCourse', width: 60},
    { title: '‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤', dataIndex: 'subjectCode', width: 50 },
    { title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÑ‡∏ó‡∏¢)', dataIndex: 'nameSubjectThai', width: 100 },
    { title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)', dataIndex: 'nameSubjectEng', width: 100 },
    { title: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ß‡∏¥‡∏ä‡∏≤', dataIndex: 'subjectCategoryName', width: 50 },
    { title: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ', dataIndex: 'subjectGroupName', width: 100 },
    { title: '‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', dataIndex: 'studyYear', width: 35 },
    { title: '‡πÄ‡∏ó‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', dataIndex: 'term', width: 35 },
    {
        title: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
        key: 'action',
        width: 100,
        render: (text, record) => ( // record ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡πÜ
          <Space size="middle">
            {/* <Button onClick={() => handleViewDetails(record.key)}>
              üëÅÔ∏è ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </Button> */}
            <Button type="primary" danger onClick={() => handleDelete(Number(record.key))}>
              üóëÔ∏è ‡∏•‡∏ö
            </Button>
          </Space>
        ),
      },
  ];

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/subjectCourse?id=${subjectCourseId}`); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Endpoint ‡πÄ‡∏î‡∏¥‡∏°
        const data = await response.json();
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ API ‡∏™‡πà‡∏á object/error ‡πÅ‡∏ó‡∏ô array
        if (Array.isArray(data)) {
          setAllData(data); // <<< 3. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          setDataSource(data); // <<< 4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        } else {
          console.warn('Unexpected /api/subjectCourse payload:', data);
          setAllData([]);
          setDataSource([]);
        }
      } catch (error) {
        console.error("Failed to fetch subjectCourse:", error);
        setDataSource([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [subjectCourseId]);

  // 2. ‡∏õ‡∏£‡∏±‡∏ö useEffect ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ courseNameFilter
  useEffect(() => {
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filterData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞ Global Search
    const finalFilteredData = filterData(allData, searchTerm, courseNameFilter);
    setDataSource(finalFilteredData);
  }, [courseNameFilter, allData, searchTerm]);

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Option ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
  const getCourseNameOptions = () => {
      // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const names = Array.from(new Set(allData.map(item => item.nameFullDegreeTh))).sort();
      
      const options = names.map(name => ({
          value: name,
          label: name.length > 30 ? `${name.substring(0, 30)}...` : name, // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
      }));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
      options.unshift({ value: 'all', label: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' });
      return options;
  };

  return (
    <Flex vertical gap="small">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Space>
          {/* Component Filter ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ */}
          <label>‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£:</label>
          <Select
            value={courseNameFilter}
            style={{ width: 120 }}
            onChange={setCourseNameFilter}
            options={getCourseNameOptions()}
            loading={loading && allData.length === 0}
          />
          {/* 4. Component Global Search */}
          <Input.Search
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å Field..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)} // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï searchTerm
            style={{ width: 300 }}
            loading={loading}
          />
        </Space>
        <Button type="primary" onClick={() => router.push(`/courses/details/${subjectCourseId}/new?initialId=${subjectCourseId}`)}>+ ‡∏™‡∏£‡πâ‡∏≤‡∏á Subject Course ‡πÄ‡∏û‡∏¥‡πà‡∏°</Button>
      </div>
      <Table<CourseDataType>
        className={styles.customTable}
        columns={fixedColumns}
        dataSource={dataSource}
        pagination={{ pageSize: 10 }} // ‡πÄ‡∏û‡∏¥‡πà‡∏° Pagination ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        scroll={{ x: 1750, y: 750 }} // ‡∏õ‡∏£‡∏±‡∏ö scroll x ‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        bordered
        loading={loading}
      />
    </Flex>
  );
};

export default CourseSubjectTable;